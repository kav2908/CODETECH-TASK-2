#include <iostream>
#include <fstream>
#include <zlib.h>
#include <vector>

// Function to compress data using zlib
std::vector<unsigned char> compress_data(const std::vector<unsigned char>& data) {
    z_stream zs;
    zs.zalloc = Z_NULL;
    zs.zfree = Z_NULL;
    zs.opaque = Z_NULL;
    zs.avail_in = data.size();
    zs.next_in = (Bytef*)data.data();
    
    deflateInit(&zs, Z_DEFAULT_COMPRESSION);
    
    std::vector<unsigned char> compressed_data;
    
    do {
        unsigned char buffer[1024];
        zs.avail_out = sizeof(buffer);
        zs.next_out = buffer;
        
        deflate(&zs, Z_FINISH);
        
        compressed_data.insert(compressed_data.end(), buffer, buffer + (sizeof(buffer) - zs.avail_out));
    } while(zs.avail_out == 0);

    deflateEnd(&zs);
    return compressed_data;
}

int main() {
    std::ifstream inputFile("input.txt", std::ios::binary);
    if (!inputFile) {
        std::cerr << "Error opening input file." << std::endl;
        return 1;
    }

    std::vector<unsigned char> fileData((std::istreambuf_iterator<char>(inputFile)), std::istreambuf_iterator<char>());
    inputFile.close();

    std::vector<unsigned char> compressedData = compress_data(fileData);

    std::ofstream outputFile("output.z", std::ios::binary);
    if (!outputFile) {
        std::cerr << "Error opening output file." << std::endl;
        return 1;
    }

    outputFile.write((char*)compressedData.data(), compressedData.size());
    outputFile.close();
    
    std::cout << "File compressed successfully." << std::endl;
    return 0;
}
